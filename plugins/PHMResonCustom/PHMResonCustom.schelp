class:: PHMResonCustom
summary:: custom resonator
related:: TODO
categories:: UGens>PHMSC

description::

Custom resonator implementation based on PHMResonCollision.


classmethods::

method::ar

argument::input
Input signal to process

argument::gain
Output gain (0.0 to 10.0)

argument::freqs
Array of frequencies for each mode

argument::mags
Array of magnitudes for each mode

argument::d1
Damping coefficient 1 (0.00001 to 100.0)

argument::d2
Damping coefficient 2 (0.00000001 to 1.0)

argument::thres
Collision threshold (-10.0 to 0.0)

argument::c_stiff
Collision stiffness (0.0 to 5000.0)

argument::posin
Input position (0.001 to 0.999)

argument::cposin
Collision position (0.001 to 0.999)

argument::nmodes
Number of modes (1 to 600)

argument::detune
Frequency detuning (-1.0 to 1.0)


examples::

code::

// Example with frequency and magnitude arrays
(
var freqs = Array.fill(80, { |i| 60.0 * (i + 1) });
var mags = Array.fill(80, { |i| 1.0 / (i + 1) });
{ PHMResonCustom.ar(Dust.ar(2), gain:4, freqs:freqs, mags:mags) }.play
)

:: 