name: Build SuperCollider Plugin (multi-platform)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            cmake git build-essential libsndfile1-dev libasound2-dev \
            libavahi-client-dev libreadline-dev libncurses5-dev libfftw3-dev \
            libxt-dev pkg-config

      - name: Set build directories
        id: paths
        shell: bash
        run: |
          echo "sc-dir=${{ github.workspace }}/SuperCollider" >> "$GITHUB_OUTPUT"
          echo "sc-build-dir=${{ github.workspace }}/SuperCollider/build" >> "$GITHUB_OUTPUT"
          echo "plugin-build-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Cache SuperCollider build
        id: cache-sc
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.paths.outputs.sc-dir }}
          key: ${{ runner.os }}-supercollider-${{ matrix.build_type }}-v1
          restore-keys: |
            ${{ runner.os }}-supercollider-

      - name: Clone SuperCollider (if not cached)
        if: steps.cache-sc.outputs.cache-hit != 'true'
        run: |
          git clone --depth=1 https://github.com/supercollider/supercollider.git ${{ steps.paths.outputs.sc-dir }}

      - name: Build and install SuperCollider (if not cached)
        if: steps.cache-sc.outputs.cache-hit != 'true'
        run: |
          cmake -S ${{ steps.paths.outputs.sc-dir }} -B ${{ steps.paths.outputs.sc-build-dir }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          cmake --build ${{ steps.paths.outputs.sc-build-dir }} --target install --config ${{ matrix.build_type }}

      - name: Configure plugin with CMake
        run: >
          cmake -B ${{ steps.paths.outputs.plugin-build-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DSC_PATH=${{ steps.paths.outputs.sc-dir }}
          -DSC_PLUGIN_DIR=${{ steps.paths.outputs.plugin-build-dir }}/plugins
          -S ${{ github.workspace }}

      - name: Build plugin
        run: cmake --build ${{ steps.paths.outputs.plugin-build-dir }} --config ${{ matrix.build_type }}

      - name: Run tests (if any)
        working-directory: ${{ steps.paths.outputs.plugin-build-dir }}
        run: ctest --build-config ${{ matrix.build_type }} || echo "No tests defined"

      - name: Upload built plugins
        uses: actions/upload-artifact@v4
        with:
          name: SuperCollider-Plugins-${{ matrix.os }}
          path: |
            ${{ steps.paths.outputs.plugin-build-dir }}/plugins/**/*.so
            ${{ steps.paths.outputs.plugin-build-dir }}/plugins/**/*.dll
